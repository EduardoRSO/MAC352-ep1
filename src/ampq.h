#ifndef AMPQ_H
#define AMPQ_H

#include <sys/types.h>


/* AMQP MODEL:
                |                                  |
                |                                  |
Publisher ----- |-> Exchange -- Routes --> Queue --|--Consumes--> Subscriber
                |                                  |

OBS: The default exchange is a direct exchange with no name (empty string)
pre-declared by the broker. It has one special property that makes it 
very useful for simple applications: every queue that is created is
automatically bound to it with a routing key which is the same as 
the queue name.

Every AMPQ has a fixed header:

+---+---+---+---+---+---+---+---+
|'A'|'M'|'Q'|'P'| 0 | 0 | 9 | 1 |
+---+---+---+---+---+---+---+---+

8 octets

General frame format

0      1         3      7          size+7       size+8
+------+---------+------+ +---------+ +-----------+
| type | channel | size | | Payload | | Frame-end |
+------+---------+------+ +---------+ +-----------+
 octet   short     long  'size' octets    octet

    +Channel number is 0 for all frames which are global to the connection and 1-65535 for frames that
refer to specific channels.
    +Type = 1, "METHOD": method frame.
    +Type = 2, "HEADER": content header frame.
    +Type = 3, "BODY": content body frame.
    +Type = 4, "HEARTBEAT": heartbeat frame.
    +The frame-end octet MUST always be the hexadecimal value "%xCE"
    +If a peer receives a frame with a type that is not one of these defined types, it MUST treat this as a
fatal protocol error and close the connection without sending any further data on it
    +When a peer reads a frame it MUST check that the frame-end is valid before attempting to decode the
frame. If the frame-end is not valid it MUST treat this as a fatal protocol error and close the
connection without sending any further data on it. It SHOULD log information about the problem,
since this indicates an error in either the server or client framing code implementation.
    +A peer MUST NOT send frames larger than the agreed-upon size. A peer that receives an oversized
frame MUST signal a connection exception with reply code 501 (frame error).
    +The channel number MUST be zero for all heartbeat frames, and for method, header and body frames
that refer to the Connection class. A peer that receives a non-zero channel number for one of these
frames MUST signal a connection exception with reply code 503 (command invalid).

Payload Methods

0          2           4
+----------+-----------+-------------- - -
| class-id | method-id | arguments...
+----------+-----------+-------------- - -

    +The class-id and method-id are constants that are defined in the AMQP class and method
specifications.
    +The arguments are a set of AMQP fields that specific to each method.
    +Class id values from %x00.01-%xEF.FF are reserved for AMQP standard classes.
    +Class id values from %xF0.00-%xFF.FF (%d61440-%d65535) may be used by implementations for
non-standard extension classes.

Content header, content body

*/





//https://manpages.debian.org/unstable/amqp-tools/amqp-consume.1.en.html
/*amqp-consume consumes messages from a queue on an AMQP server. For each 
message that arrives, a receiving command is run, with the message body 
supplied to it on standard input.*/
void ampq-consume(unsigned char* queueName, unsigned char* message)


//https://manpages.debian.org/unstable/amqp-tools/amqp-declare-queue.1.en.html
/*amqp-declare-queue attempts to create a queue on an AMQP server, and exits. 
If the empty-string is supplied as the queue name, a fresh queue name is 
generated by the server and returned. In all cases, if a queue was 
successfully declared, the (raw binary) name of the queue is printed to 
standard output, followed by a newline.*/
void ampq-declare-queue(unsigned char* queueName)

//https://manpages.debian.org/unstable/amqp-tools/amqp-publish.1.en.html
/*Publishes a message to an exchange on an AMQP server.*/
void ampq-publish(unsigned char* queueName, unsigned char* message)

#endif