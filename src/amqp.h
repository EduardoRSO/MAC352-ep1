#ifndef AMPQ_H
#define AMPQ_H

#include <sys/types.h>

//amqp*.stripped.xml
#define FRAME_MIN_SIZE 4096
#define FRAME_END 206
#define REPLY_SUCCESS 200
#define AMQP_DEFAULT_CHANNEL_HEARTBEAT 0

enum frame_type_t{
  METHOD    = 1, //frame_method
  HEADER    = 2, //frame_header
  BODY      = 3, //frame_contet
  HEARTBEAT = 8  //frame_heartbeat
};

//AMQP Data types
typedef short class_id_t;
typedef short method_id_t;
typedef u_char* protocol_t;
typedef u_char id_major_t;
typedef u_char version_major_t;
typedef u_char version_minor_t;
typedef unsigned short channel_t;
typedef long length_t;
typedef short weight_t;
typedef unsigned long body_size_t;
typedef short property_flag_t;

typedef struct frame_heartbeat_t{
  //Has nothing inside;
} frame_heartbeat;

typedef struct frame_protocol_header_t{
  protocol_t protocol;
  id_major_t id_major;
  id_minor_t id_minor;
  version_major_t version_major;
  version_minor_t version_minor;
} protocol_header;

typedef struct frame_method_t{
  class_id_t class_id;
  method_id_t method_id;
  void *arguments;
 } frame_method;

typedef struct frame_header_t{
  class_t class_id;
  weight_t weight;
  body_size_t body_size;
  property_flag_t property_flag;
  void* property_list;
 } frame_header; 

typedef struct frame_body_t{
  length_t length;
  void *buffer;
} frame_body;


/* 
frame_protocol_header:
+---+---+---+---+---+---+---+---+
|'A'|'M'|'Q'|'P'| 0 | 0 | 9 | 1 |
+---+---+---+---+---+---+---+---+
          8 octets

frame_method
+----------+-----------+-------------- - -
| class-id | method-id | arguments...
+----------+-----------+-------------- - -
    short     short    

frame_header
+----------+--------+-----------+----------------+------------- - -
| class-id | weight | body size | property flags | property list...
+----------+--------+-----------+----------------+------------- - -
   short     short    long long      short           remainder

frame_body
 +-----------------------+ +-----------+
| Opaque binary payload | | frame-end |
+-----------------------+ +-----------+         
                                  
General frame format
0      1         3      7          size+7       size+8
+------+---------+------+ +---------+ +-----------+
| type | channel | size | | Payload | | Frame-end |
+------+---------+------+ +---------+ +-----------+
 octet   short     long  'size' octets    octet
*/
typedef struct frame_format_t{
  enum frame_type_t frame_type;
  channel_t channel; //must be 0 - 65535
  length_t length; //payload size excluding frame-end
  union{
    frame_heartbeat_t frame_heartbeat;
    frame_protocol_header_t frame_protocol_header;
    frame_method_t frame_method;
    frame_header_t frame_header;
    frame_body_t frame_body;
  } payload;
  u_char frame_end; //must always be "%xCE"
} frame_format;


//https://manpages.debian.org/unstable/amqp-tools/amqp-consume.1.en.html
/*amqp-consume consumes messages from a queue on an AMQP server. For each 
message that arrives, a receiving command is run, with the message body 
supplied to it on standard input.*/
void amqp-consume(unsigned char* queueName, unsigned char* message);


//https://manpages.debian.org/unstable/amqp-tools/amqp-declare-queue.1.en.html
/*amqp-declare-queue attempts to create a queue on an AMQP server, and exits. 
If the empty-string is supplied as the queue name, a fresh queue name is 
generated by the server and returned. In all cases, if a queue was 
successfully declared, the (raw binary) name of the queue is printed to 
standard output, followed by a newline.*/
void amqp-declare-queue(unsigned char* queueName);

//https://manpages.debian.org/unstable/amqp-tools/amqp-publish.1.en.html
/*Publishes a message to an exchange on an AMQP server.*/
void amqp-publish(unsigned char* queueName, unsigned char* message);

#endif
